textbook: 
"Java Programming: From Basics to Advanced Concepts":

chapters:
- Chapter 1: Object Oriented Programming:
sections:
- Section: 1.1 Java Program Structure:
subsections:
- 1.1a Syntax and Semantics
- 1.1b Program Layout
- 1.1c Java Keywords

- Section: 1.2 Primitives:
subsections:
- 1.2a Data Types
- 1.2b Variables
- 1.2c Constants

- Section: 1.3 Control Flow:
subsections:
- 1.3a Conditional Statements
- 1.3b Looping Constructs
- 1.3c Exception Handling

- Section: 1.4 Arrays:
subsections:
- 1.4a Array Declaration and Initialization
- 1.4b Multi-Dimensional Arrays
- 1.4c Array Manipulation

- Section: 1.5 Objects:
subsections:
- 1.5a Object Creation and Use
- 1.5b Object Lifecycle
- 1.5c Object Methods

- Chapter 2: Classes and Interfaces:
sections:
- Section: 2.1 Classes vs. Objects/Instances:
subsections:
- 2.1a Class Definition
- 2.1b Object Instantiation
- 2.1c Class vs. Instance Variables

- Section: 2.2 Method Overloading:
subsections:
- 2.2a Overloading Principles
- 2.2b Overloading Rules
- 2.2c Overloading Examples

- Section: 2.3 Inheritance:
subsections:
- 2.3a Inheritance Basics
- 2.3b Superclass and Subclass
- 2.3c Inheritance Hierarchies

- Section: 2.4 Abstract Superclasses:
subsections:
- 2.4a Abstract Class Definition
- 2.4b Abstract Methods
- 2.4c Abstract Class Use Cases

- Section: 2.5 Interfaces:
subsections:
- 2.5a Interface Definition
- 2.5b Implementing Interfaces
- 2.5c Interface vs. Abstract Class

- Section: 2.6 Polymorphism:
subsections:
- 2.6a Polymorphism Basics
- 2.6b Dynamic Method Dispatch
- 2.6c Polymorphism in Inheritance

- Section: 2.7 Method Overriding:
subsections:
- 2.7a Overriding Principles
- 2.7b Overriding Rules
- 2.7c Overriding Examples

- Chapter 3: Hashing, Collections, and Comparators:
sections:
- Section: 3.1 Hashing:
subsections:
- 3.1a Hash Function
- 3.1b Hash Collision
- 3.1c Hashing in Java

- Section: 3.2 Data Structures:
subsections:
- 3.2a List, Set, and Map
- 3.2b Queue and Stack
- 3.2c Tree and Graph

- Section: 3.3 Collections:
subsections:
- 3.3a Collection Framework
- 3.3b Collection Classes
- 3.3c Collection Interfaces

- Section: 3.4 Comparators:
subsections:
- 3.4a Comparator Interface
- 3.4b Sorting with Comparators
- 3.4c Custom Comparators

- Chapter 4: Interfaces, Abstract classes, Exceptions, Inner classes:
sections:
- Section: 4.1 Interfaces:
subsections:
- 4.1a Interface Definition
- 4.1b Implementing Interfaces
- 4.1c Interface vs. Abstract Class

- Section: 4.2 Abstract Classes:
subsections:
- 4.2a Abstract Class Definition
- 4.2b Abstract Methods
- 4.2c Abstract Class Use Cases

- Section: 4.3 Exceptions:
subsections:
- 4.3a Exception Handling Basics
- 4.3b Try-Catch-Finally Blocks
- 4.3c Custom Exceptions

- Section: 4.4 Inner Classes:
subsections:
- 4.4a Inner Class Definition
- 4.4b Types of Inner Classes
- 4.4c Use Cases for Inner Classes

- Chapter 5: Review, Question and Answer, Writing an Address Book Program that Loads and Stores Files to Disk:
sections:
- Section: 5.1 Review:
subsections:
- 5.1a Review of Key Concepts
- 5.1b Review of Coding Practices
- 5.1c Review of Problem Solving Techniques

- Section: 5.2 Question and Answer:
subsections:
- 5.2a Commonly Asked Questions
- 5.2b Best Practices for Answering Questions
- 5.2c Practice Questions and Solutions

- Section: 5.3 Writing an Address Book Program:
subsections:
- 5.3a Program Requirements
- 5.3b Program Design
- 5.3c Program Implementation

- Section: 5.4 Loading and Storing Files to Disk:
subsections:
- 5.4a File I/O Basics
- 5.4b Reading from a File
- 5.4c Writing to a File

- Chapter 6: Simple AIMTMAssignment:
sections:
- Section: 6.1 Reference Implementation:
subsections:
- 6.1a Understanding the Reference Implementation
- 6.1b Analyzing the Reference Implementation
- 6.1c Modifying the Reference Implementation

- Section: 6.2 Source Code Handout:
subsections:
- 6.2a Understanding the Source Code
- 6.2b Analyzing the Source Code
- 6.2c Modifying the Source Code

- Section: 6.3 TOC2 Protocol:
subsections:
- 6.3a Understanding the TOC2 Protocol
- 6.3b Implementing the TOC2 Protocol
- 6.3c Testing the TOC2 Protocol

- Chapter 7: Advanced Object-Oriented Programming:
sections:
- Section: 7.1 Design Patterns:
subsections:
- 7.1a Singleton Pattern
- 7.1b Factory Pattern
- 7.1c Observer Pattern

- Section: 7.2 Multithreading:
subsections:
- 7.2a Thread Creation and Management
- 7.2b Synchronization
- 7.2c Deadlocks and Starvation

- Section: 7.3 Generics:
subsections:
- 7.3a Generic Classes
- 7.3b Generic Methods
- 7.3c Bounded Type Parameters

- Section: 7.4 Annotations:
subsections:
- 7.4a Annotation Basics
- 7.4b Predefined Annotations
- 7.4c Custom Annotations

- Chapter 8: JavaFX and GUI Programming:
sections:
- Section: 8.1 JavaFX Basics:
subsections:
- 8.1a JavaFX Application Structure
- 8.1b JavaFX Components
- 8.1c JavaFX Event Handling

- Section: 8.2 Layouts and Controls:
subsections:
- 8.2a Layout Managers
- 8.2b Basic Controls
- 8.2c Advanced Controls

- Section: 8.3 Graphics and Animation:
subsections:
- 8.3a Drawing Shapes
- 8.3b Color and Text
- 8.3c Animation and Timelines

- Section: 8.4 FXML and Scene Builder:
subsections:
- 8.4a FXML Basics
- 8.4b Using Scene Builder
- 8.4c Binding and Controllers

- Chapter 9: Networking and Databases:
sections:
- Section: 9.1 Networking:
subsections:
- 9.1a Sockets and Servers
- 9.1b URL and HttpURLConnection
- 9.1c RMI and Serialization

- Section: 9.2 Databases:
subsections:
- 9.2a JDBC Basics
- 9.2b SQL and Database Operations
- 9.2c ResultSet and Metadata

- Section: 9.3 Java Persistence API:
subsections:
- 9.3a JPA Basics
- 9.3b Entities and Relationships
- 9.3c Queries and Transactions

- Section: 9.4 Hibernate:
subsections:
- 9.4a Hibernate Basics
- 9.4b Mapping and Configuration
- 9.4c Session and Transaction Management

- Chapter 10: Testing and Debugging:
sections:
- Section: 10.1 Unit Testing:
subsections:
- 10.1a JUnit Basics
- 10.1b Writing Test Cases
- 10.1c Test Suites and Assertions

- Section: 10.2 Debugging:
subsections:
- 10.2a Debugging Techniques
- 10.2b Using a Debugger
- 10.2c Breakpoints and Watchpoints

- Section: 10.3 Logging:
subsections:
- 10.3a Logging Basics
- 10.3b Log Levels and Handlers
- 10.3c Log Formatting and Filters

- Section: 10.4 Performance Profiling:
subsections:
- 10.4a Profiling Basics
- 10.4b Using a Profiler
- 10.4c Analyzing Profiling Results

- Chapter 11: Java 8 Features:
sections:
- Section: 11.1 Lambda Expressions:
subsections:
- 11.1a Lambda Syntax
- 11.1b Functional Interfaces
- 11.1c Method References

- Section: 11.2 Streams:
subsections:
- 11.2a Stream Creation
- 11.2b Stream Operations
- 11.2c Parallel Streams

- Section: 11.3 Optional:
subsections:
- 11.3a Optional Basics
- 11.3b Using Optional
- 11.3c Avoiding Null Pointer Exceptions

- Section: 11.4 Date and Time API:
subsections:
- 11.4a LocalDate, LocalTime, and LocalDateTime
- 11.4b Period and Duration
- 11.4c Formatting and Parsing Dates

- Chapter 12: Java 9 Features:
sections:
- Section: 12.1 Modules:
subsections:
- 12.1a Module Basics
- 12.1b Module Declaration
- 12.1c Module Paths and Services

- Section: 12.2 JShell:
subsections:
- 12.2a JShell Basics
- 12.2b Using JShell
- 12.2c JShell Commands and Features

- Section: 12.3 Process API:
subsections:
- 12.3a Process API Basics
- 12.3b Process Handling
- 12.3c Process Information and Control

- Section: 12.4 HTTP/2 Client:
subsections:
- 12.4a HTTP/2 Client Basics
- 12.4b Sending Requests and Receiving Responses
- 12.4c Asynchronous Requests

- Chapter 13: Java 10 Features:
sections:
- Section: 13.1 Local-Variable Type Inference:
subsections:
- 13.1a var Keyword
- 13.1b When to Use var
- 13.1c Limitations of var

- Section: 13.2 Application Class-Data Sharing:
subsections:
- 13.2a Class-Data Sharing Basics
- 13.2b Creating a Class-Data Archive
- 13.2c Using a Class-Data Archive

- Section: 13.3 Garbage-Collector Interface:
subsections:
- 13.3a Garbage-Collector Interface Basics
- 13.3b Using the Garbage-Collector Interface
- 13.3c Garbage-Collector Interface Benefits

- Section: 13.4 Time-Based Release Versioning:
subsections:
- 13.4a Time-Based Release Versioning Basics
- 13.4b Understanding Version Numbers
- 13.4c Impact of Time-Based Release Versioning

- Chapter 14: Java 11 Features:
sections:
- Section: 14.1 Local-Variable Syntax for Lambda Parameters:
subsections:
- 14.1a Lambda Parameter Syntax
- 14.1b Using var in Lambda Expressions
- 14.1c Benefits of var in Lambda Expressions

- Section: 14.2 HTTP Client (Standard):
subsections:
- 14.2a HTTP Client Basics
- 14.2b Sending Requests and Receiving Responses
- 14.2c Asynchronous Requests

- Section: 14.3 Epsilon: A No-Op Garbage Collector:
subsections:
- 14.3a Epsilon Basics
- 14.3b Using Epsilon
- 14.3c Epsilon Use Cases

- Section: 14.4 Flight Recorder:
subsections:
- 14.4a Flight Recorder Basics
- 14.4b Using Flight Recorder
- 14.4c Analyzing Flight Recorder Data

- Chapter 15: Java 12 Features:
sections:
- Section: 15.1 Switch Expressions (Preview):
subsections:
- 15.1a Switch Expression Syntax
- 15.1b Using Switch Expressions
- 15.1c Benefits of Switch Expressions

- Section: 15.2 Compact Number Formatting:
subsections:
- 15.2a Compact Number Formatting Basics
- 15.2b Using Compact Number Formatting
- 15.2c Customizing Compact Number Formatting

- Section: 15.3 Teeing Collectors:
subsections:
- 15.3a Teeing Collector Basics
- 15.3b Using a Teeing Collector
- 15.3c Teeing Collector Use Cases

- Section: 15.4 JVM Constants API:
subsections:
- 15.4a JVM Constants API Basics
- 15.4b Using the JVM Constants API
- 15.4c JVM Constants API Benefits

- Chapter 16: Java 13 Features:
sections:
- Section: 16.1 Text Blocks (Preview):
subsections:
- 16.1a Text Block Syntax
- 16.1b Using Text Blocks
- 16.1c Benefits of Text Blocks

- Section: 16.2 Switch Expressions (Second Preview):
subsections:
- 16.2a Switch Expression Syntax
- 16.2b Using Switch Expressions
- 16.2c Benefits of Switch Expressions

- Section: 16.3 Reimplement the Legacy Socket API:
subsections:
- 16.3a Legacy Socket API Basics
- 16.3b Reimplementing the Legacy Socket API
- 16.3c Benefits of the Reimplemented Socket API

- Section: 16.4 Dynamic CDS Archives:
subsections:
- 16.4a Dynamic CDS Archive Basics
- 16.4b Using Dynamic CDS Archives
- 16.4c Benefits of Dynamic CDS Archives

- Chapter 17: Java 14 Features:
sections:
- Section: 17.1 Switch Expressions (Standard):
subsections:
- 17.1a Switch Expression Syntax
- 17.1b Using Switch Expressions
- 17.1c Benefits of Switch Expressions

- Section: 17.2 Helpful NullPointerExceptions:
subsections:
- 17.2a NullPointerException Basics
- 17.2b Helpful NullPointerException Messages
- 17.2c Benefits of Helpful NullPointerExceptions

- Section: 17.3 Records (Preview):
subsections:
- 17.3a Record Basics
- 17.3b Using Records
- 17.3c Benefits of Records

- Section: 17.4 Pattern Matching for instanceof (Preview):
subsections:
- 17.4a Pattern Matching Basics
- 17.4b Using Pattern Matching with instanceof
- 17.4c Benefits of Pattern Matching

- Chapter 18: Java 15 Features:
sections:
- Section: 18.1 Text Blocks (Standard):
subsections:
- 18.1a Text Block Syntax
- 18.1b Using Text Blocks
- 18.1c Benefits of Text Blocks

- Section: 18.2 Records (Second Preview):
subsections:
- 18.2a Record Basics
- 18.2b Using Records
- 18.2c Benefits of Records

- Section: 18.3 Pattern Matching for instanceof (Second Preview):
subsections:
- 18.3a Pattern Matching Basics
- 18.3b Using Pattern Matching with instanceof
- 18.3c Benefits of Pattern Matching

- Section: 18.4 Sealed Classes (Preview):
subsections:
- 18.4a Sealed Class Basics
- 18.4b Using Sealed Classes
- 18.4c Benefits of Sealed Classes

- Chapter 19: Java 16 Features:
sections:
- Section: 19.1 Records (Standard):
subsections:
- 19.1a Record Basics
- 19.1b Using Records
- 19.1c Benefits of Records

- Section: 19.2 Pattern Matching for instanceof (Standard):
subsections:
- 19.2a Pattern Matching Basics
- 19.2b Using Pattern Matching with instanceof
- 19.2c Benefits of Pattern Matching

- Section: 19.3 Sealed Classes (Second Preview):
subsections:
- 19.3a Sealed Class Basics
- 19.3b Using Sealed Classes
- 19.3c Benefits of Sealed Classes

- Section: 19.4 Foreign-Memory Access API (Second Incubator):
subsections:
- 19.4a Foreign-Memory Access API Basics
- 19.4b Using the Foreign-Memory Access API
- 19.4c Benefits of the Foreign-Memory Access API

- Chapter 20: Java 17 Features:
sections:
- Section: 20.1 Sealed Classes (Standard):
subsections:
- 20.1a Sealed Class Basics
- 20.1b Using Sealed Classes
- 20.1c Benefits of Sealed Classes

- Section: 20.2 Pattern Matching for switch (Preview):
subsections:
- 20.2a Pattern Matching for switch Basics
- 20.2b Using Pattern Matching for switch
- 20.2c Benefits of Pattern Matching for switch

- Section: 20.3 Foreign Function and Memory API (Incubator):
subsections:
- 20.3a Foreign Function and Memory API Basics
- 20.3b Using the Foreign Function and Memory API
- 20.3c Benefits of the Foreign Function and Memory API

- Section: 20.4 Strong Encapsulation of JDK Internals:
subsections:
- 20.4a Strong Encapsulation Basics
- 20.4b Impact of Strong Encapsulation
- 20.4c Benefits of Strong Encapsulation