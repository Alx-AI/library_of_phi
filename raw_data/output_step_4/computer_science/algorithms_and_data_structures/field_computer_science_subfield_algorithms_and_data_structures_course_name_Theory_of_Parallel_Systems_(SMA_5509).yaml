textbook:
  'Theory of Parallel Systems: Concepts, Performance, and Analysis":':
    chapters:
    - '- Chapter 1: Introduction to Parallel Systems:':
        sections:
        - '- Section: 1.1 Historical Overview of Parallel Computing:':
            subsections:
            - 1.1a Evolution of Parallel Computing
            - 1.1b Key Milestones in Parallel Computing
            - 1.1c Current Trends in Parallel Computing
        - '- Section: 1.2 Parallel Programming Models and Paradigms:':
            subsections:
            - 1.2a Shared Memory Model
            - 1.2b Distributed Memory Model
            - 1.2c Hybrid Memory Model
    - '- Chapter 2: Dynamic Multithreading:':
        sections:
        - '- Section: 2.1 Introduction to Dynamic Multithreading:':
            subsections:
            - 2.1a Basics of Dynamic Multithreading
            - 2.1b Advantages of Dynamic Multithreading
            - 2.1c Challenges in Dynamic Multithreading
        - '- Section: 2.2 Cilk Manual 5.3.2:':
            subsections:
            - 2.2a Overview of Cilk
            - 2.2b Using Cilk for Dynamic Multithreading
            - 2.2c Advanced Features of Cilk
        - '- Section: 2.3 Minicourse on Multithreaded Programming:':
            subsections:
            - 2.3a Introduction to Multithreaded Programming
            - 2.3b Best Practices in Multithreaded Programming
            - 2.3c Case Studies in Multithreaded Programming
    - '- Chapter 3: Serial Performance and Caching:':
        sections:
        - '- Section: 3.1 Introduction to Serial Performance and Caching:':
            subsections:
            - 3.1a Basics of Serial Performance
            - 3.1b Importance of Caching in Performance
            - 3.1c Techniques for Optimizing Cache Performance
        - '- Section: 3.2 Sorting Code Handout:':
            subsections:
            - 3.2a Understanding the Sorting Algorithm
            - 3.2b Analyzing the Performance of the Sorting Algorithm
            - 3.2c Optimizing the Sorting Algorithm
        - '- Section: 3.3 C Code for Sorting:':
            subsections:
            - 3.3a Understanding the C Code for Sorting
            - 3.3b Analyzing the Performance of the C Code
            - 3.3c Optimizing the C Code for Sorting
        - '- Section: 3.4 ASM Code for Sorting (Excerpt):':
            subsections:
            - 3.4a Understanding the ASM Code for Sorting
            - 3.4b Analyzing the Performance of the ASM Code
            - 3.4c Optimizing the ASM Code for Sorting
        - '- Section: 3.5 Cache-Oblivious Algorithms:':
            subsections:
            - 3.5a Introduction to Cache-Oblivious Algorithms
            - 3.5b Advantages of Cache-Oblivious Algorithms
            - 3.5c Implementing Cache-Oblivious Algorithms
        - "- Section: 3.6 Prokop\u2019s Masters Thesis:":
            subsections:
            - "3.6a Overview of Prokop\u2019s Thesis"
            - "3.6b Key Contributions of Prokop\u2019s Thesis"
            - "3.6c Implications of Prokop\u2019s Thesis"
        - '- Section: 3.7 FOCS Paper:':
            subsections:
            - 3.7a Overview of the FOCS Paper
            - 3.7b Key Contributions of the FOCS Paper
            - 3.7c Implications of the FOCS Paper
    - '- Chapter 4: Determinacy Detection and Race Detection:':
        sections:
        - '- Section: 4.1 Introduction to Determinacy Detection and Race Detection:':
            subsections:
            - 4.1a Basics of Determinacy Detection
            - 4.1b Techniques for Race Detection
            - 4.1c Challenges in Determinacy and Race Detection
        - '- Section: 4.2 Efficient Detection of Determinacy Race by Feng and Leiserson:':
            subsections:
            - 4.2a Overview of Feng and Leiserson's Method
            - 4.2b Advantages of Feng and Leiserson's Method
            - 4.2c Implementing Feng and Leiserson's Method
    - '- Chapter 5: Consistency of the Memory Sub-System:':
        sections:
        - '- Section: 5.1 Introduction to Consistency of the Memory Sub-System:':
            subsections:
            - 5.1a Basics of Memory Consistency
            - 5.1b Techniques for Ensuring Memory Consistency
            - 5.1c Challenges in Memory Consistency
    - '- Chapter 6: Analyzing Space Bounds:':
        sections:
        - '- Section: 6.1 Introduction to Analyzing Space Bounds:':
            subsections:
            - 6.1a Basics of Space Analysis
            - 6.1b Techniques for Space Bound Analysis
            - 6.1c Challenges in Space Bound Analysis
        - '- Section: 6.2 Jeremy Fineman''s Contributions:':
            subsections:
            - 6.2a Overview of Fineman's Contributions
            - 6.2b Impact of Fineman's Contributions
            - 6.2c Future Directions Inspired by Fineman's Work
    - '- Chapter 7: Cilk Scheduler:':
        sections:
        - '- Section: 7.1 Introduction to Cilk Scheduler:':
            subsections:
            - 7.1a Basics of Cilk Scheduler
            - 7.1b Advantages of Cilk Scheduler
            - 7.1c Implementing Cilk Scheduler
        - '- Section: 7.2 Competitive Snoopy Caching:':
            subsections:
            - 7.2a Introduction to Snoopy Caching
            - 7.2b Advantages of Snoopy Caching
            - 7.2c Implementing Snoopy Caching
        - '- Section: 7.3 Pick a Winner:':
            subsections:
            - 7.3a Introduction to the Pick a Winner Strategy
            - 7.3b Advantages of the Pick a Winner Strategy
            - 7.3c Implementing the Pick a Winner Strategy
    - '- Chapter 8: Parallel Algorithms:':
        sections:
        - '- Section: 8.1 Introduction to Parallel Algorithms:':
            subsections:
            - 8.1a Basics of Parallel Algorithms
            - 8.1b Common Types of Parallel Algorithms
            - 8.1c Implementing Parallel Algorithms
        - '- Section: 8.2 Analysis of Parallel Algorithms:':
            subsections:
            - 8.2a Introduction to Parallel Algorithm Analysis
            - 8.2b Techniques for Parallel Algorithm Analysis
            - 8.2c Challenges in Parallel Algorithm Analysis
        - '- Section: 8.3 Case Studies in Parallel Algorithms:':
            subsections:
            - '8.3a Case Study 1: Parallel Sorting'
            - '8.3b Case Study 2: Parallel Matrix Multiplication'
            - '8.3c Case Study 3: Parallel Graph Algorithms'
    - '- Chapter 9: Parallel Architectures:':
        sections:
        - '- Section: 9.1 Introduction to Parallel Architectures:':
            subsections:
            - 9.1a Basics of Parallel Architectures
            - 9.1b Common Types of Parallel Architectures
            - 9.1c Implementing Parallel Architectures
        - '- Section: 9.2 Analysis of Parallel Architectures:':
            subsections:
            - 9.2a Introduction to Parallel Architecture Analysis
            - 9.2b Techniques for Parallel Architecture Analysis
            - 9.2c Challenges in Parallel Architecture Analysis
        - '- Section: 9.3 Case Studies in Parallel Architectures:':
            subsections:
            - '9.3a Case Study 1: Shared Memory Architectures'
            - '9.3b Case Study 2: Distributed Memory Architectures'
            - '9.3c Case Study 3: Hybrid Memory Architectures'
    - '- Chapter 10: Parallel Programming Languages:':
        sections:
        - '- Section: 10.1 Introduction to Parallel Programming Languages:':
            subsections:
            - 10.1a Basics of Parallel Programming Languages
            - 10.1b Common Types of Parallel Programming Languages
            - 10.1c Implementing Parallel Programming Languages
        - '- Section: 10.2 Analysis of Parallel Programming Languages:':
            subsections:
            - 10.2a Introduction to Parallel Programming Language Analysis
            - 10.2b Techniques for Parallel Programming Language Analysis
            - 10.2c Challenges in Parallel Programming Language Analysis
        - '- Section: 10.3 Case Studies in Parallel Programming Languages:':
            subsections:
            - '10.3a Case Study 1: Cilk'
            - '10.3b Case Study 2: OpenMP'
            - '10.3c Case Study 3: MPI'
    - '- Chapter 11: Parallel Performance Tuning:':
        sections:
        - '- Section: 11.1 Introduction to Parallel Performance Tuning:':
            subsections:
            - 11.1a Basics of Parallel Performance Tuning
            - 11.1b Techniques for Parallel Performance Tuning
            - 11.1c Challenges in Parallel Performance Tuning
        - '- Section: 11.2 Case Studies in Parallel Performance Tuning:':
            subsections:
            - '11.2a Case Study 1: Tuning a Parallel Sorting Algorithm'
            - '11.2b Case Study 2: Tuning a Parallel Matrix Multiplication Algorithm'
            - '11.2c Case Study 3: Tuning a Parallel Graph Algorithm'
    - '- Chapter 12: Parallel Debugging:':
        sections:
        - '- Section: 12.1 Introduction to Parallel Debugging:':
            subsections:
            - 12.1a Basics of Parallel Debugging
            - 12.1b Techniques for Parallel Debugging
            - 12.1c Challenges in Parallel Debugging
        - '- Section: 12.2 Case Studies in Parallel Debugging:':
            subsections:
            - '12.2a Case Study 1: Debugging a Parallel Sorting Algorithm'
            - '12.2b Case Study 2: Debugging a Parallel Matrix Multiplication Algorithm'
            - '12.2c Case Study 3: Debugging a Parallel Graph Algorithm'
    - '- Chapter 13: Parallel Testing:':
        sections:
        - '- Section: 13.1 Introduction to Parallel Testing:':
            subsections:
            - 13.1a Basics of Parallel Testing
            - 13.1b Techniques for Parallel Testing
            - 13.1c Challenges in Parallel Testing
        - '- Section: 13.2 Case Studies in Parallel Testing:':
            subsections:
            - '13.2a Case Study 1: Testing a Parallel Sorting Algorithm'
            - '13.2b Case Study 2: Testing a Parallel Matrix Multiplication Algorithm'
            - '13.2c Case Study 3: Testing a Parallel Graph Algorithm'
    - '- Chapter 14: Parallel Profiling:':
        sections:
        - '- Section: 14.1 Introduction to Parallel Profiling:':
            subsections:
            - 14.1a Basics of Parallel Profiling
            - 14.1b Techniques for Parallel Profiling
            - 14.1c Challenges in Parallel Profiling
        - '- Section: 14.2 Case Studies in Parallel Profiling:':
            subsections:
            - '14.2a Case Study 1: Profiling a Parallel Sorting Algorithm'
            - '14.2b Case Study 2: Profiling a Parallel Matrix Multiplication Algorithm'
            - '14.2c Case Study 3: Profiling a Parallel Graph Algorithm'
    - '- Chapter 15: Parallel Benchmarking:':
        sections:
        - '- Section: 15.1 Introduction to Parallel Benchmarking:':
            subsections:
            - 15.1a Basics of Parallel Benchmarking
            - 15.1b Techniques for Parallel Benchmarking
            - 15.1c Challenges in Parallel Benchmarking
        - '- Section: 15.2 Case Studies in Parallel Benchmarking:':
            subsections:
            - '15.2a Case Study 1: Benchmarking a Parallel Sorting Algorithm'
            - '15.2b Case Study 2: Benchmarking a Parallel Matrix Multiplication Algorithm'
            - '15.2c Case Study 3: Benchmarking a Parallel Graph Algorithm'
    - '- Chapter 16: Parallel Scalability:':
        sections:
        - '- Section: 16.1 Introduction to Parallel Scalability:':
            subsections:
            - 16.1a Basics of Parallel Scalability
            - 16.1b Techniques for Improving Parallel Scalability
            - 16.1c Challenges in Parallel Scalability
        - '- Section: 16.2 Case Studies in Parallel Scalability:':
            subsections:
            - '16.2a Case Study 1: Scalability of a Parallel Sorting Algorithm'
            - '16.2b Case Study 2: Scalability of a Parallel Matrix Multiplication
              Algorithm'
            - '16.2c Case Study 3: Scalability of a Parallel Graph Algorithm'
    - '- Chapter 17: Parallel Efficiency:':
        sections:
        - '- Section: 17.1 Introduction to Parallel Efficiency:':
            subsections:
            - 17.1a Basics of Parallel Efficiency
            - 17.1b Techniques for Improving Parallel Efficiency
            - 17.1c Challenges in Parallel Efficiency
        - '- Section: 17.2 Case Studies in Parallel Efficiency:':
            subsections:
            - '17.2a Case Study 1: Efficiency of a Parallel Sorting Algorithm'
            - '17.2b Case Study 2: Efficiency of a Parallel Matrix Multiplication
              Algorithm'
            - '17.2c Case Study 3: Efficiency of a Parallel Graph Algorithm'
    - '- Chapter 18: Parallel Overhead:':
        sections:
        - '- Section: 18.1 Introduction to Parallel Overhead:':
            subsections:
            - 18.1a Basics of Parallel Overhead
            - 18.1b Techniques for Reducing Parallel Overhead
            - 18.1c Challenges in Parallel Overhead
        - '- Section: 18.2 Case Studies in Parallel Overhead:':
            subsections:
            - '18.2a Case Study 1: Overhead of a Parallel Sorting Algorithm'
            - '18.2b Case Study 2: Overhead of a Parallel Matrix Multiplication Algorithm'
            - '18.2c Case Study 3: Overhead of a Parallel Graph Algorithm'
    - '- Chapter 19: Parallel Load Balancing:':
        sections:
        - '- Section: 19.1 Introduction to Parallel Load Balancing:':
            subsections:
            - 19.1a Basics of Parallel Load Balancing
            - 19.1b Techniques for Parallel Load Balancing
            - 19.1c Challenges in Parallel Load Balancing
        - '- Section: 19.2 Case Studies in Parallel Load Balancing:':
            subsections:
            - '19.2a Case Study 1: Load Balancing a Parallel Sorting Algorithm'
            - '19.2b Case Study 2: Load Balancing a Parallel Matrix Multiplication
              Algorithm'
            - '19.2c Case Study 3: Load Balancing a Parallel Graph Algorithm'
    - '- Chapter 20: Parallel Fault Tolerance:':
        sections:
        - '- Section: 20.1 Introduction to Parallel Fault Tolerance:':
            subsections:
            - 20.1a Basics of Parallel Fault Tolerance
            - 20.1b Techniques for Parallel Fault Tolerance
            - 20.1c Challenges in Parallel Fault Tolerance
        - '- Section: 20.2 Case Studies in Parallel Fault Tolerance:':
            subsections:
            - '20.2a Case Study 1: Fault Tolerance in a Parallel Sorting Algorithm'
            - '20.2b Case Study 2: Fault Tolerance in a Parallel Matrix Multiplication
              Algorithm'
            - '20.2c Case Study 3: Fault Tolerance in a Parallel Graph Algorithm'
